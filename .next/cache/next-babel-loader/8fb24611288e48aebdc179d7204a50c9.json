{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\aas_8\\\\Desktop\\\\Capstone\\\\restaurant-aws-deploy\\\\frontend\\\\components\\\\restaurantList.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    query {\\n      restaurants {\\n        id\\n        name\\n        description\\n        image {\\n          url\\n        }\\n      }\\n    }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Container, Row, Col } from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  _s();\n\n  var _this = this;\n\n  var _useState = useState(0),\n      restaurantID = _useState[0],\n      setRestaurantID = _useState[1];\n\n  var _useContext = useContext(AppContext),\n      cart = _useContext.cart;\n\n  var _useState2 = useState(cart),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var GET_RESTAURANTS = gql(_templateObject());\n\n  var _useQuery = useQuery(GET_RESTAURANTS),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  if (error) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 21\n    }\n  }, \"ERROR\");\n  if (!data) return __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 21\n    }\n  }, \"Not found\");\n  var searchQuery = data.restaurants.filter(function (res) {\n    return res.name.toLowerCase().includes(props.search);\n  });\n  var restId = searchQuery[0].id; // Define renderer for Dishes\n\n  var renderDishes = function renderDishes(restaurantID) {\n    return __jsx(Dishes, {\n      restId: restaurantID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    });\n  };\n\n  if (searchQuery.length > 0) {\n    var restList = searchQuery.map(function (res) {\n      return __jsx(Col, {\n        xs: \"20\",\n        sm: \"6\",\n        md: \"4\",\n        lg: \"3\",\n        key: res.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, __jsx(Card, {\n        className: \"restaurant-card\",\n        style: {\n          backgroundColor: \"light brown\",\n          color: \"black\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }\n      }, __jsx(CardImg, {\n        top: true,\n        className: \"restaurant-image\",\n        src: 'https://urchin-app-hi2hs.ondigitalocean.app/' + res.image.url,\n        style: {\n          height: \"200px\",\n          objectFit: \"fill\"\n        } // Set the image size\n        ,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }\n      }), __jsx(CardBody, {\n        style: {\n          padding: \"10px\",\n          borderRadius: \"5px\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }\n      }, __jsx(CardTitle, {\n        className: \"restaurant-title\",\n        style: {\n          fontSize: \"90%\",\n          color: \"black\",\n          background: \"lightgray\",\n          padding: \"5px\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }\n      }, res.name), __jsx(CardText, {\n        className: \"restaurant-description\",\n        style: {\n          fontSize: \"90%\",\n          color: \"black\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }\n      }, res.description), __jsx(Button, {\n        color: \"grey\" // Change color to \"grey\"\n        ,\n        onClick: function onClick() {\n          return setRestaurantID(res.id);\n        },\n        className: \"restaurant-button\",\n        style: {\n          backgroundColor: \"black\",\n          color: \"white\",\n          fontSize: \"90%\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }, \"View Menu\"))));\n    });\n    return __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }\n    }, restList), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, renderDishes(restaurantID)));\n  } else {\n    return __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 12\n      }\n    }, \"No Restaurants Found\");\n  }\n}\n\n_s(RestaurantList, \"AG1Od7CGruCtgOneqAeKWk/inGw=\", false, function () {\n  return [useQuery];\n});\n\n_c = RestaurantList;\nexport default RestaurantList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RestaurantList\");","map":{"version":3,"sources":["C:/Users/aas_8/Desktop/Capstone/restaurant-aws-deploy/frontend/components/restaurantList.js"],"names":["gql","useQuery","Dishes","useContext","useState","AppContext","Button","Card","CardBody","CardImg","CardText","CardTitle","Container","Row","Col","RestaurantList","props","restaurantID","setRestaurantID","cart","state","setState","GET_RESTAURANTS","loading","error","data","searchQuery","restaurants","filter","res","name","toLowerCase","includes","search","restId","id","renderDishes","length","restList","map","backgroundColor","color","image","url","height","objectFit","padding","borderRadius","fontSize","background","description"],"mappings":"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","sourcesContent":["import { gql, useQuery } from '@apollo/client';\nimport Dishes from \"./dishes\";\nimport { useContext, useState } from 'react';\nimport AppContext from \"./context\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardImg,\n  CardText,\n  CardTitle,\n  Container,\n  Row,\n  Col\n} from \"reactstrap\";\n\nfunction RestaurantList(props) {\n  const [restaurantID, setRestaurantID] = useState(0);\n  const { cart } = useContext(AppContext);\n  const [state, setState] = useState(cart);\n  const GET_RESTAURANTS = gql`\n    query {\n      restaurants {\n        id\n        name\n        description\n        image {\n          url\n        }\n      }\n    }\n  `;\n  const { loading, error, data } = useQuery(GET_RESTAURANTS);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>ERROR</p>;\n  if (!data) return <p>Not found</p>;\n\n  let searchQuery = data.restaurants.filter((res) => {\n    return res.name.toLowerCase().includes(props.search);\n  });\n\n  let restId = searchQuery[0].id;\n\n  // Define renderer for Dishes\n  const renderDishes = (restaurantID) => {\n    return (<Dishes restId={restaurantID}></Dishes>);\n  };\n\n  if (searchQuery.length > 0) {\n    const restList = searchQuery.map((res) => (\n      <Col xs=\"20\" sm=\"6\" md=\"4\" lg=\"3\" key={res.id}>\n        <Card className=\"restaurant-card\" style={{ backgroundColor: \"light brown\", color: \"black\" }}>\n          <CardImg\n            top={true}\n            className=\"restaurant-image\"\n            src={'https://urchin-app-hi2hs.ondigitalocean.app/' + res.image.url}\n            style={{ height: \"200px\", objectFit: \"fill\" }} // Set the image size\n          />\n          <CardBody style={{ padding: \"10px\", borderRadius: \"5px\" }}>\n            <CardTitle className=\"restaurant-title\" style={{ fontSize: \"90%\", color: \"black\", background: \"lightgray\", padding: \"5px\" }}>\n              {res.name}\n            </CardTitle>\n            <CardText className=\"restaurant-description\" style={{ fontSize: \"90%\", color: \"black\" }}>\n              {res.description}\n            </CardText>\n            <Button\n              color=\"grey\" // Change color to \"grey\"\n              onClick={() => setRestaurantID(res.id)}\n              className=\"restaurant-button\"\n              style={{ backgroundColor: \"black\", color: \"white\", fontSize: \"90%\" }}\n            >\n              View Menu\n            </Button>\n          </CardBody>\n        </Card>\n      </Col>\n    ));\n\n    return (\n      <Container>\n        <Row>{restList}</Row>\n        <Row>{renderDishes(restaurantID)}</Row>\n      </Container>\n    );\n  } else {\n    return <h1>No Restaurants Found</h1>;\n  }\n}\n\nexport default RestaurantList;\n"]},"metadata":{},"sourceType":"module"}