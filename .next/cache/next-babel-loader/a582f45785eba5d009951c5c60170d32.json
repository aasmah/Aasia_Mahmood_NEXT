{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aas_8\\\\Desktop\\\\Capstone\\\\restaurant-aws-deploy\\\\frontend\\\\components\\\\checkoutForm.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useContext } from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\nimport fetch from \"isomorphic-fetch\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CardSection from \"./cardSection\";\nimport AppContext from \"./context\";\nimport Cookies from \"js-cookie\";\nimport Router from \"next/router\";\n\nfunction CheckoutForm() {\n  const {\n    0: data,\n    1: setData\n  } = useState({\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    stripe_id: \"\"\n  });\n  const {\n    0: error,\n    1: setError\n  } = useState(\"\");\n  const stripe = useStripe();\n  const elements = useElements();\n  const appContext = useContext(AppContext);\n\n  function onChange(e) {\n    // set the key = to the name property equal to the value typed\n    const updateItem = data[e.target.name] = e.target.value; // update the state data object\n\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      updateItem\n    }));\n  }\n\n  async function submitOrder() {\n    // event.preventDefault();\n    // // Use elements.getElement to get a reference to the mounted Element.\n    const cardElement = elements.getElement(CardElement); // // Pass the Element directly to other Stripe.js methods:\n    // // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n    // get token back from stripe to process credit card\n    // const API_URL =     process.env.NEXT_PUBLIC_API_URL || \"https://urchin-app-hi2hs.ondigitalocean.app\";\n\n    const API_URL = \"https://urchin-app-hi2hs.ondigitalocean.app\";\n    const token = await stripe.createToken(cardElement);\n    const userToken = Cookies.get(\"token\");\n    const response = await fetch(`${API_URL}/orders`, {\n      method: \"POST\",\n      headers: userToken && {\n        Authorization: `Bearer ${userToken}`\n      },\n      body: JSON.stringify({\n        amount: Number(Math.round(appContext.cart.total + \"e2\") + \"e-2\"),\n        dishes: appContext.cart.items,\n        address: data.address,\n        city: data.city,\n        state: data.state,\n        token: token.token.id\n      })\n    }); //redirect back to home page for restaurant selection reset cart\n\n    const cart = useContext(appContext);\n    cart = {\n      items: [],\n      total: 0\n    };\n    Router.push(\"/\");\n\n    if (!response.ok) {\n      setError(response.statusText);\n      console.log(\"SUCCESS\");\n    } // OTHER stripe methods you can use depending on app\n    // // or createPaymentMethod - https://stripe.com/docs/js/payment_intents/create_payment_method\n    // stripe.createPaymentMethod({\n    //   type: \"card\",\n    //   card: cardElement,\n    // });\n    // // or confirmCardPayment - https://stripe.com/docs/js/payment_intents/confirm_card_payment\n    // stripe.confirmCardPayment(paymentIntentClientSecret, {\n    //   payment_method: {\n    //     card: cardElement,\n    //   },\n    // });\n\n  }\n\n  return __jsx(\"div\", {\n    className: \"checkout\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Checkout\"), __jsx(\"div\", {\n    className: \"paper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default CheckoutForm;","map":{"version":3,"sources":["C:/Users/aas_8/Desktop/Capstone/restaurant-aws-deploy/frontend/components/checkoutForm.js"],"names":["React","useState","useContext","FormGroup","Label","Input","fetch","CardElement","useStripe","useElements","CardSection","AppContext","Cookies","Router","CheckoutForm","data","setData","address","city","state","stripe_id","error","setError","stripe","elements","appContext","onChange","e","updateItem","target","name","value","submitOrder","cardElement","getElement","API_URL","token","createToken","userToken","get","response","method","headers","Authorization","body","JSON","stringify","amount","Number","Math","round","cart","total","dishes","items","id","push","ok","statusText","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\nimport fetch from \"isomorphic-fetch\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport CardSection from \"./cardSection\";\nimport AppContext from \"./context\";\nimport Cookies from \"js-cookie\";\nimport Router from \"next/router\";\n\nfunction CheckoutForm() {\n  const [data, setData] = useState({\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    stripe_id: \"\",\n  });\n  const [error, setError] = useState(\"\");\n  const stripe = useStripe();\n  const elements = useElements();\n  const appContext = useContext(AppContext);\n\n  function onChange(e) {\n    // set the key = to the name property equal to the value typed\n    const updateItem = (data[e.target.name] = e.target.value);\n    // update the state data object\n    setData({ ...data, updateItem });\n  }\n\n  async function submitOrder() {\n    // event.preventDefault();\n\n    // // Use elements.getElement to get a reference to the mounted Element.\n    const cardElement = elements.getElement(CardElement);\n\n    // // Pass the Element directly to other Stripe.js methods:\n    // // e.g. createToken - https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement\n    // get token back from stripe to process credit card\n    // const API_URL =     process.env.NEXT_PUBLIC_API_URL || \"https://urchin-app-hi2hs.ondigitalocean.app\";\n    const API_URL = \"https://urchin-app-hi2hs.ondigitalocean.app\";\n\n    const token = await stripe.createToken(cardElement);\n    const userToken = Cookies.get(\"token\");\n    const response = await fetch(`${API_URL}/orders`, {\n      method: \"POST\",\n      headers: userToken && { Authorization: `Bearer ${userToken}` },\n      body: JSON.stringify({\n        amount: Number(Math.round(appContext.cart.total + \"e2\") + \"e-2\"),\n        dishes: appContext.cart.items,\n        address: data.address,\n        city: data.city,\n        state: data.state,\n        token: token.token.id,\n      }),\n    });\n    //redirect back to home page for restaurant selection reset cart\n    const cart = useContext(appContext);\n    cart = { items: [], total: 0 };\n    Router.push(\"/\");\n    if (!response.ok) {\n      setError(response.statusText);\n      console.log(\"SUCCESS\");\n    }\n\n    // OTHER stripe methods you can use depending on app\n    // // or createPaymentMethod - https://stripe.com/docs/js/payment_intents/create_payment_method\n    // stripe.createPaymentMethod({\n    //   type: \"card\",\n    //   card: cardElement,\n    // });\n\n    // // or confirmCardPayment - https://stripe.com/docs/js/payment_intents/confirm_card_payment\n    // stripe.confirmCardPayment(paymentIntentClientSecret, {\n    //   payment_method: {\n    //     card: cardElement,\n    //   },\n    // });\n  }\n\n  return (\n    <div className=\"checkout\">\n      <h4>Checkout</h4>\n      <div className=\"paper\">\n        {/* .paper content */}\n      </div>\n      {/* Rest of your code */}\n    </div>\n  );\n}\nexport default CheckoutForm;\n"]},"metadata":{},"sourceType":"module"}